#!/bin/bash
# Versioner
# Git versioning and tagging without the hassle
# brian@theconnman.com
# Version 2.2.0

usage() {
	echo "Usage: versioner [-v version] [-t tag message] [-s setup type] [-Mmsbw]"
	echo "       versioner -h for help."
	exit
}

showhelp() {
	echo "Usage: versioner: [-v version] [-t tag message] [-s setup type] [-Mmbwh]"
	echo "Versioner: Git versioning and tagging without the hassle"
	echo "  -v: version number"
	echo "  -t: tag message"
	echo "  -s: setup type (grails)"
	echo "  -M: Major version bump"
	echo "  -m: Minor version bump"
	echo "  -b: Build version bump"
	echo "  -w: Setup wizard"
	echo "  -h: this help message"
	exit
}

setupWizard() {
	context=`git config --local --get versioner.context`
	file=`git config --local --get versioner.file`
	branch=`git config --local --get versioner.branch`
	echo -e "Versioner Setup Wizard\n"
	echo -e "Press enter to submit a value, enter no value to preserve the current setting\n"
	IFS= read -r -p "Enter the full version context matcher (use "\(.*\)" to match the version): [$context] " context
	IFS= read -r -p "Enter the file path of the file containing the version number relative to the git repository root: [$file] " file
	IFS= read -r -p "Enter the development branch name: [$branch] " branch
	echo ""
	setup "$context" "$file" "$branch"
	echo "Setup Complete"
	exit
}

defaultSetup() {
	if [[ $1 -eq "grails" ]]; then
		context="app.version=\(.*\)"
		file="application.properties"
		branch=dev
	else
		echo "Setup type not recognized."
		exit
	fi
	setup "$context" "$file" "$branch"
	exit
}

setup() {
	if [ -n "$1" ]; then
		git config --local --unset-all versioner.context
		git config --local --add versioner.context "\"$1\""
		echo "Context set to '$1'"
	fi
	if [ -n "$2" ]; then
		git config --local --unset-all versioner.file
		git config --local --add versioner.file "$2"
		echo "File set to '$2'"
	fi
	if [ -n "$3" ]; then
		git config --local --unset-all versioner.branch
		git config --local --add versioner.branch "$3"
		echo "Branch set to '$3'"
	fi
}

# Initialize variables and define defaults

# Get arguments

while getopts "Mmbwv:t:s:h" name; do
	case $name in
		v)  version=$OPTARG;;
		t)  tag=$OPTARG;;
		s)  defaultSetup $OPTARG;;
		M)  type=0;;
		m)  type=1;;
		b)  type=2;;
		w)  setupWizard $0;;
		h)  showhelp $0;;
		[?])  usage $0;;
	esac
done

if [[ ( -z $tag ) || (( -z $version ) && ( -z $type )) ]]; then
	echo "A tag message and a version or version bump level must be provided."
	usage
else
	context=`git config --local --get versioner.context`
	file=`git config --local --get versioner.file`
	branch=`git config --local --get versioner.branch`
	if [[ -z $context ]]; then
		echo "Please run \`git config --local --add versioner.context **version context**\`"
		echo "Make sure to wrap the context in quotes, especially if it contains spaces"
	elif [[ -z $file ]]; then
		echo "Please run \`git config --local --add versioner.file **file with version**\`"
	elif [[ -z $branch ]]; then
		echo "Please run \`git config --local --add versioner.branch **branch to merge**\`"
	else
		fixed=`echo "$context" | sed -e 's/^"//'  -e 's/"$//'`
		
		# Get the current version
		ver=`cat $file | sed -n "s/.*$fixed.*/\1/p"`
		
		if [[ -z $version ]]; then
		
			# Split and increment the correct version level
			IFS=. VER=($ver)
			VER[$type]=$((${VER[$type]}+1))
			if [[ $type -eq 0 ]]; then
				if [[ ${#VER[@]} -eq 3 ]]; then
					VER[1]=0
					VER[2]=0
				elif [[ ${#VER[@]} -eq 2 ]]; then
					VER[1]=0
				fi
			elif [[ $type -eq 1 ]]; then
				if [[ ${#VER[@]} -eq 3 ]]; then
					VER[2]=0
				fi
			fi
			
			# Rejoin the version array
			IFS=.; version="${VER[*]}"
		fi
		echo -e "\nChecking out dev."
		git checkout $branch
		
		echo -e "\nEditing $file."
		mv "$file" "$file.temp"
		sed "s/$ver/$version/" < "$file.temp" > "$file"
		rm "$file.temp"
		
		echo -e "\nCommitting updated version.\n"
		git add "$file"
		git commit -m "Version bump to $version."
		
		git checkout master
		
		git merge --no-ff dev
		
		echo -e "\nTagging version $version."
		git tag -a v"$version" -m "$tag"
		
		git checkout $branch
		
		echo -e "\nSUCCESS"
		echo "To push changes run 'push --all' and 'push --tags'."
	fi
fi