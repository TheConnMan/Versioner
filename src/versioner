#!/bin/bash
# Versioner
# Git versioning and tagging without the hassle
# brian@theconnman.com
# Version 1.0.0

usage() {
	echo "Usage: versioner [-v version] [-t message] [-Mmbh]"
	echo "       versioner -h for help."
	exit
}

showhelp() {
	echo "Usage: versioner: [-v version] [-t tag] [-Mmbh]"
	echo "Versioner: Git versioning and tagging without the hassle"
	echo "  -v: version number"
	echo "  -t: tag message"
	echo "  -M: Major version bump"
	echo "  -m: Minor version bump"
	echo "  -b: Build version bump"
	echo "  -h: this help message"
	exit
}

# Initialize variables and define defaults

# Get arguments

while getopts "Mmbv:t:h" name; do
	case $name in
		v)  version=$OPTARG;;
		t)  tag=$OPTARG;;
		M)  type=0;;
		m)  type=1;;
		b)  type=2;;
		h)  showhelp $0;;
		[?])  usage $0;;
	esac
done

if [[ ( -z $tag ) || (( -z $version ) && ( -z $type )) ]]; then
	echo "A tag message and a version or version bump level must be provided."
	usage
else
	context=`git config --local --get versioner.context`
	file=`git config --local --get versioner.file`
	branch=`git config --local --get versioner.branch`
	if [[ -z $context ]]; then
		echo "Please run \`git config --local --add versioner.context **version context**\`"
	elif [[ -z $file ]]; then
		echo "Please run \`git config --local --add versioner.file **file with version**\`"
	elif [[ -z $branch ]]; then
		echo "Please run \`git config --local --add versioner.branch **branch to merge**\`"
	else
		if [[ -z $version ]]; then
		
			# Define context regex
			reg='s/'$context'\(.*\)/\1/p'
			
			# Get the current version
			ver=`cat $file | grep -h "$context" | sed -n "$reg"`
			
			# Split and increment the correct version level
			IFS=. VER=($ver)
			VER[$type]=$((${VER[$type]}+1))
			if [[ $type -eq 0 ]]; then
				if [[ ${#VER[@]} -eq 3 ]]; then
					VER[1]=0
					VER[2]=0
				elif [[ ${#VER[@]} -eq 2 ]]; then
					VER[1]=0
				fi
			elif [[ $type -eq 1 ]]; then
				if [[ ${#VER[@]} -eq 3 ]]; then
					VER[2]=0
				fi
			fi
			
			# Rejoin the version array
			IFS=.; version="${VER[*]}"
		fi
		echo -e "\nChecking out dev."
		git checkout $branch
		
		echo -e "\nEditing $file."
		mv $file $file.temp
		sed "s/$context.*/$context$version/g" < $file.temp > $file
		rm $file.temp
		
		echo -e "\nCommitting updated version.\n"
		git add $file
		git commit -m "Version bump to $version."
		
		git checkout master
		
		git merge --no-ff dev
		
		echo -e "\nTagging version $version."
		git tag -a v$version -m "$tag"
		
		git checkout $branch
		
		echo -e "\nSUCCESS"
		echo "To push changes run 'push --all' and 'push --tags'."
	fi
fi